#Область ПрограммныйИнтерфейс

// Проверяет, является ли файл пустым.
// Возвращает значение истину, если размер файла меньше или равен константе в байтах.
// В противном случае возвращается значение false.
// 
// Параметры:
// ПутьКФайлу - Строка - Путь к файлу, который необходимо проверить.
// 
// Возвращаемое значение:
// Булево - Признак пустоты файла
//
Функция ПустойФайл(ПутьКФайлу) Экспорт

	ГраницаПустотыВБайтах = 3; // Для BOM и переноса
	Файл = Новый Файл(ПутьКФайлу);
	Сообщить("" + Файл.Размер());
	Возврат Файл.Размер() <= ГраницаПустотыВБайтах;
	
КонецФункции
	
// Читает json файл и преобразует его в объект
//
// Параметры:
//   ПутьКФайлу - Строка - Путь к файлу, который будет прочитан
//   ВСоответствие - Булево - От значения параметра зависит в какой тип будет происходить чтение
//
// Возвращаемое значение:
//   Соответствие,Структура - Объект из json файла
//
Функция ПрочитатьОбъект(ПутьКФайлу, ВСоответствие = Истина) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу, "UTF-8");
	Объект = ПрочитатьJSON(ЧтениеJSON, ВСоответствие);
	ЧтениеJSON.Закрыть();
	Возврат Объект;
КонецФункции

// Записывает произвольный объект в json файл
//
// Параметры:
//   ПутьКФайлу - Строка - Путь  json файлу
//   ОбъектЗаписи - Объект - Объект для серриализации
//
Процедура ЗаписатьОбъект(ПутьКФайлу, ОбъектЗаписи) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ПутьКФайлу, "UTF-8", , Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, ОбъектЗаписи);
	ЗаписьJSON.Закрыть();
КонецПроцедуры

// Создает объект JSON из строки JSON
//
// Параметры:
//   СтрокаJSON - Строка - строка с json-содержимым
//   ПолучитьБезопасно - Булево - Если "Истина", то 
//
// Возвращаемое значение:
//   Произвольный - объект JSON
//
Функция ПолучитьОбъектИзСтрокиJSON(СтрокаJSON, ПолучитьБезопасно = Ложь) Экспорт
	
	ОбъектJSON = Неопределено;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		ОбъектJSON = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		Если Не ПолучитьБезопасно Тогда
			ВызватьИсключение("Ошибка получения объекта JSON из строки " + ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;

	ЧтениеJSON.Закрыть();
	Возврат ОбъектJSON;
КонецФункции

// Выполняет построчное чтение файла по указанному пути и возвращает строку
//
// Параметры:
//   ПутьКФайлу - Строка - путь до читаемого файла
//
// Возвращаемое значение:
//   Строка - строка с содержимым файла
//
Функция ПрочитатьФайл(ПутьКФайлу) Экспорт
	Если Не ПроверитьСуществованиеФайла(ПутьКФайлу) Тогда
		ВызватьИсключение СтрШаблон("Файл по указанному пути не существует '%1'", ПутьКФайлу);
	КонецЕсли;
	
	Результат = Новый Массив;
	Текст = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8, , , Ложь);
	ТС = Текст.ПрочитатьСтроку();
	Пока ТС <> Неопределено Цикл
		Результат.Добавить(ТС);
		ТС = Текст.ПрочитатьСтроку();	
	КонецЦикла;
	Текст.Закрыть();
	Возврат СтрСоединить(Результат, Символы.ПС);
КонецФункции

// Находит шаблон для отчета 
//
// Возвращаемое значение:
//   Строка - путь к файлу с шаблоном отчета 
//
Функция РесурсОтчет() Экспорт

	Возврат ОбъединитьПути(Ресурсы(), "report.json");

КонецФункции

// Находит шаблон замечания
//
// Возвращаемое значение:
//   Строка - Путь к шаблону замечания
//
Функция РесурсЗамечание() Экспорт

	Возврат ОбъединитьПути(Ресурсы(), "diagnostic.json");

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Находит путь к каталогу с ресурсами
//
// Возвращаемое значение:
//   Строка - путь к каталогу с ресурсами
//
Функция Ресурсы() Экспорт
	
	Возврат ОбъединитьПути(КаталогИсходников(), ДиректорияРесурсов());

КонецФункции

// Находит путь к каталогу исходных файлов программы
//
// Возвращаемое значение:
//   Строка - Каталог исходных файлов программы
//
Функция КаталогИсходников() Экспорт
 Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции

// Находит путь к корневому каталогу программы
//
// Возвращаемое значение:
//   Строка - Путь к корневому каталогу программы
//
Функция КаталогПрограммы() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "..");
КонецФункции

// Находит внутренний файл правил
//
// Параметры:
//   ПутьФайлаПравил - Строка - имя файла правил (значение по-умолчанию: "custom-rules.json")
//
// Возвращаемое значение:
//   Строка - Путь к внутреннему файлу правил
//
Функция ФайлПравилПрограммы(ПутьФайлаПравил = "custom-rules.json") Экспорт
   Возврат ОбъединитьПути(КаталогПрограммы(), ПутьФайлаПравил);
КонецФункции

// Находит внутренний файл правил
//
// Параметры:
//   Путь - Строка - Путь к проекту
//
// Возвращаемое значение:
//   Строка - Имя - последняя часть пути
//
Функция ИмяФайлаИлиДиректории(Путь) Экспорт
	Возврат Новый Файл(Путь).ИмяБезРасширения;
КонецФункции

// Проверяет существование файла
//
// Параметры:
//   Путь - Строка - Путь к файлу
//
// Возвращаемое значение:
//   Булево - Истина, если файл существует
//
Функция ПроверитьСуществованиеФайла(Путь) Экспорт
	
	Если Не ЗначениеЗаполнено(СокрЛП(Путь)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(Путь);
	ФайлСуществует = Файл.Существует() И Файл.ЭтоФайл();
	Файл = Неопределено;
	
	Возврат ФайлСуществует;

КонецФункции

// Проверяет существование каталога
//
// Параметры:
//   Путь - Строка - Путь к каталогу
//
// Возвращаемое значение:
//   Булево - Истина, если каталог существует
//
Функция ПроверитьСуществованиеКаталога(Путь) Экспорт
	
	Если Не ЗначениеЗаполнено(СокрЛП(Путь)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(Путь);
	КаталогСуществует = Файл.Существует() И Файл.ЭтоКаталог();
	Файл = Неопределено;

	Возврат КаталогСуществует;

КонецФункции

// Корректирует путь до конечного объекта (файла или каталога)
// * В качестве разделителей используется прямой слэш "/"
//
// Параметры:
//   Путь - Строка - Путь к каталогу
//
// Возвращаемое значение:
//   Строка - скорректированная строка пути к объекту (файлу или каталогу)
//
Функция ПолучитьКорректныйПутьФайла(Путь) Экспорт
	ПутьСлеш = СтрЗаменить(Путь, "\", "/");
	ЧастиПути = СтрРазделить(ПутьСлеш, "/", Ложь);
	КорректныйПутьФайла = "";
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		Если Не ЗначениеЗаполнено(СокрЛП(ЧастьПути)) Тогда
			Продолжить;
		КонецЕсли;
		ЭтоДочернийКаталог = ЗначениеЗаполнено(СокрЛП(КорректныйПутьФайла));
		Если Не ЗначениеЗаполнено(КорректныйПутьФайла) И СтрНачинаетсяС(ПутьСлеш, "/") Тогда
			КорректныйПутьФайла = "/" + ЧастьПути;
			Продолжить;
		КонецЕсли;
		КорректныйПутьФайла = ?(ЭтоДочернийКаталог, КорректныйПутьФайла + "/" + ЧастьПути, ЧастьПути);
	КонецЦикла;
	Возврат КорректныйПутьФайла;
КонецФункции

// Создает структуру каталогов для конечного файла
//
// Параметры:
//   Путь - Строка - Путь к конечному файлу
//   СоздатьПустойФайл - Булево - Если Истина - будет создан пустой файл
//
Процедура СоздатьСтруктуруКаталоговФайла(Путь, СоздатьПустойФайл = Ложь) Экспорт
	
	Если ПроверитьСуществованиеФайла(Путь) Тогда
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(Путь);
	ПутьФайла = Файл.Путь;
	ЧастиПути = СтрРазделить(ПутьФайла, "/", Ложь);
	ТекущийКаталог = "";
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		Если СтрНачинаетсяС(Путь, "/") И Не ЗначениеЗаполнено(ТекущийКаталог) Тогда
			ТекущийКаталог = "/" + ЧастьПути;
		Иначе
			ТекущийКаталог = ?(ЗначениеЗаполнено(ТекущийКаталог), ТекущийКаталог + "/" + ЧастьПути, ЧастьПути);
		КонецЕсли;
		
		Если Не ПроверитьСуществованиеКаталога(ТекущийКаталог) Тогда
			СоздатьКаталог(ТекущийКаталог);
		КонецЕсли;
	КонецЦикла;

	Если СоздатьПустойФайл Тогда
		СоздатьПустойФайл(Путь);
	КонецЕсли;

КонецПроцедуры

// Получает имя файла по указанному пути
//
// Параметры:
//   Путь - Строка - Путь к указанному файлу
//
// Возвращаемое значение:
//   Строка - Имя файла
//
Функция ПолучитьИмяФайла(Путь) Экспорт
	Файл = Новый Файл(Путь);
	Возврат Файл.Имя;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возврщает дирректорию ресурсов
//
// Возвращаемое значение:
//   Строка - Имя дирректории
//
Функция ДиректорияРесурсов()
	Возврат "Ресурсы";
КонецФункции

// Создает пустой файл по указанному пути
// 
// Параметры:
//   Путь - путь создаваемого файла
//
Процедура СоздатьПустойФайл(Путь)
	ЗаписьТекста = Новый ЗаписьТекста;
	ЗаписьТекста.Открыть(Путь);
	ЗаписьТекста.Записать("");
	ЗаписьТекста.Закрыть();
КонецПроцедуры


#КонецОбласти